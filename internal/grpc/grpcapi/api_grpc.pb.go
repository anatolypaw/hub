// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api.proto

package grpcapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Grpcapi_GetCodeForPrint_FullMethodName = "/Grpcapi/GetCodeForPrint"
)

// GrpcapiClient is the client API for Grpcapi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcapiClient interface {
	GetCodeForPrint(ctx context.Context, in *GetCodeForPrintRequest, opts ...grpc.CallOption) (*CodeForPrint, error)
}

type grpcapiClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcapiClient(cc grpc.ClientConnInterface) GrpcapiClient {
	return &grpcapiClient{cc}
}

func (c *grpcapiClient) GetCodeForPrint(ctx context.Context, in *GetCodeForPrintRequest, opts ...grpc.CallOption) (*CodeForPrint, error) {
	out := new(CodeForPrint)
	err := c.cc.Invoke(ctx, Grpcapi_GetCodeForPrint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcapiServer is the server API for Grpcapi service.
// All implementations must embed UnimplementedGrpcapiServer
// for forward compatibility
type GrpcapiServer interface {
	GetCodeForPrint(context.Context, *GetCodeForPrintRequest) (*CodeForPrint, error)
	mustEmbedUnimplementedGrpcapiServer()
}

// UnimplementedGrpcapiServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcapiServer struct {
}

func (UnimplementedGrpcapiServer) GetCodeForPrint(context.Context, *GetCodeForPrintRequest) (*CodeForPrint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodeForPrint not implemented")
}
func (UnimplementedGrpcapiServer) mustEmbedUnimplementedGrpcapiServer() {}

// UnsafeGrpcapiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcapiServer will
// result in compilation errors.
type UnsafeGrpcapiServer interface {
	mustEmbedUnimplementedGrpcapiServer()
}

func RegisterGrpcapiServer(s grpc.ServiceRegistrar, srv GrpcapiServer) {
	s.RegisterService(&Grpcapi_ServiceDesc, srv)
}

func _Grpcapi_GetCodeForPrint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCodeForPrintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcapiServer).GetCodeForPrint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpcapi_GetCodeForPrint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcapiServer).GetCodeForPrint(ctx, req.(*GetCodeForPrintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Grpcapi_ServiceDesc is the grpc.ServiceDesc for Grpcapi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Grpcapi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Grpcapi",
	HandlerType: (*GrpcapiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCodeForPrint",
			Handler:    _Grpcapi_GetCodeForPrint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
